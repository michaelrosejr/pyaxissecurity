# coding: utf-8

"""
    PublicAdminApi

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyaxissecurity.configuration import Configuration


class ApplicationModelV1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'ApplicationModelV1Type',
        'enabled': 'bool',
        'connector_zone_id': 'str',
        'tags': 'list[SlimModelV1]',
        'identity_provider_id': 'str',
        'network_range_application_data': 'NetworkRangeApplicationDataModelV1'
    }

    attribute_map = {
        'type': 'type',
        'enabled': 'enabled',
        'connector_zone_id': 'connectorZoneId',
        'tags': 'tags',
        'identity_provider_id': 'identityProviderId',
        'network_range_application_data': 'networkRangeApplicationData'
    }

    def __init__(self, type=None, enabled=True, connector_zone_id=None, tags=None, identity_provider_id=None, network_range_application_data=None, _configuration=None):  # noqa: E501
        """ApplicationModelV1 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._enabled = None
        self._connector_zone_id = None
        self._tags = None
        self._identity_provider_id = None
        self._network_range_application_data = None
        self.discriminator = None

        self.type = type
        self.enabled = enabled
        self.connector_zone_id = connector_zone_id
        if tags is not None:
            self.tags = tags
        if identity_provider_id is not None:
            self.identity_provider_id = identity_provider_id
        if network_range_application_data is not None:
            self.network_range_application_data = network_range_application_data

    @property
    def type(self):
        """Gets the type of this ApplicationModelV1.  # noqa: E501


        :return: The type of this ApplicationModelV1.  # noqa: E501
        :rtype: ApplicationModelV1Type
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApplicationModelV1.


        :param type: The type of this ApplicationModelV1.  # noqa: E501
        :type: ApplicationModelV1Type
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def enabled(self):
        """Gets the enabled of this ApplicationModelV1.  # noqa: E501


        :return: The enabled of this ApplicationModelV1.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ApplicationModelV1.


        :param enabled: The enabled of this ApplicationModelV1.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def connector_zone_id(self):
        """Gets the connector_zone_id of this ApplicationModelV1.  # noqa: E501


        :return: The connector_zone_id of this ApplicationModelV1.  # noqa: E501
        :rtype: str
        """
        return self._connector_zone_id

    @connector_zone_id.setter
    def connector_zone_id(self, connector_zone_id):
        """Sets the connector_zone_id of this ApplicationModelV1.


        :param connector_zone_id: The connector_zone_id of this ApplicationModelV1.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and connector_zone_id is None:
            raise ValueError("Invalid value for `connector_zone_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                connector_zone_id is not None and len(connector_zone_id) < 1):
            raise ValueError("Invalid value for `connector_zone_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._connector_zone_id = connector_zone_id

    @property
    def tags(self):
        """Gets the tags of this ApplicationModelV1.  # noqa: E501


        :return: The tags of this ApplicationModelV1.  # noqa: E501
        :rtype: list[SlimModelV1]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ApplicationModelV1.


        :param tags: The tags of this ApplicationModelV1.  # noqa: E501
        :type: list[SlimModelV1]
        """

        self._tags = tags

    @property
    def identity_provider_id(self):
        """Gets the identity_provider_id of this ApplicationModelV1.  # noqa: E501


        :return: The identity_provider_id of this ApplicationModelV1.  # noqa: E501
        :rtype: str
        """
        return self._identity_provider_id

    @identity_provider_id.setter
    def identity_provider_id(self, identity_provider_id):
        """Sets the identity_provider_id of this ApplicationModelV1.


        :param identity_provider_id: The identity_provider_id of this ApplicationModelV1.  # noqa: E501
        :type: str
        """

        self._identity_provider_id = identity_provider_id

    @property
    def network_range_application_data(self):
        """Gets the network_range_application_data of this ApplicationModelV1.  # noqa: E501


        :return: The network_range_application_data of this ApplicationModelV1.  # noqa: E501
        :rtype: NetworkRangeApplicationDataModelV1
        """
        return self._network_range_application_data

    @network_range_application_data.setter
    def network_range_application_data(self, network_range_application_data):
        """Sets the network_range_application_data of this ApplicationModelV1.


        :param network_range_application_data: The network_range_application_data of this ApplicationModelV1.  # noqa: E501
        :type: NetworkRangeApplicationDataModelV1
        """

        self._network_range_application_data = network_range_application_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationModelV1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationModelV1):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicationModelV1):
            return True

        return self.to_dict() != other.to_dict()
